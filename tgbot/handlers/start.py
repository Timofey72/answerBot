from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hcode

from tgbot.keyboards.inline import buttons, admin
from tgbot.misc.states import AnswerState
from tgbot.services.parser import create_url_and_start_parser


async def user_start(message: Message):
    ans = """
üëãüèº –ü—Ä–∏–≤–µ—Ç!
–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Ä–µ—à–∏—Ç—å –ø–æ—á—Ç–∏
–ª—é–±–æ–π —Ç–µ—Å—Ç –Ω–∞ <b>skysmart</b>!
    
–°—Ç–æ–∏–º–æ—Å—Ç—å - –ë–ï–°–ü–õ–ê–¢–ù–û‚ùó
üíØ–î–∞, –≤–∞–º –Ω–µ –ø–æ–∫–∞–∑–∞–ª–æ—Å—å, —Ä–µ—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤,
–∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –¥–ª—è –≤–∞—Å –ø—É–Ω–∫—Çüëáüèª
    """
    await message.answer(ans, reply_markup=buttons)


async def profile(call: CallbackQuery):
    message = f"""
üìã –ü—Ä–æ—Ñ–∏–ª—å

–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏üë∑üèª‚Äç‚ôÇÔ∏è
    """
    await call.message.answer(message)
    await call.answer()


async def solve_test(call: CallbackQuery):
    await call.message.answer('‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Ç–µ—Å—Ç!')
    await call.answer()
    await AnswerState.first()


async def parse_data(message: Message, state: FSMContext):
    try:
        a = 3 / 0
        url = message.text
        answers = create_url_and_start_parser(url)
        msg = ''
        for answer in answers:
            ans = answer[2].replace('[', '').replace(']', '')
            msg += f'<b>{answer[0]}</b>. {answer[1]}\n<b>–û—Ç–≤–µ—Ç</b>: {hcode(ans)}\n'
        await message.answer(msg)
    except Exception:
        await message.answer('–û—à–∏–±–∫–∞')
    await state.finish()


def register_start(dp: Dispatcher):
    dp.register_message_handler(user_start, commands=["start"])
    dp.register_callback_query_handler(profile, text='profile')
    dp.register_callback_query_handler(solve_test, text='solve_test')
    dp.register_message_handler(parse_data, state=AnswerState.GetURL)
