from aiogram import Dispatcher, Bot
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hcode

from tgbot.config import load_config
from tgbot.keyboards.inline import buttons, report_admin_button
from tgbot.misc.states import AnswerState
from tgbot.services.parser import create_url_and_start_parser

err = {
    'url': '',
    'error': '',
    'user_id': ''
}


async def user_start(message: Message):
    ans = """
üëãüèº –ü—Ä–∏–≤–µ—Ç!
–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Ä–µ—à–∏—Ç—å –ø–æ—á—Ç–∏
–ª—é–±–æ–π —Ç–µ—Å—Ç –Ω–∞ <b>skysmart</b>!
    
–°—Ç–æ–∏–º–æ—Å—Ç—å - –ë–ï–°–ü–õ–ê–¢–ù–û‚ùó
üíØ–î–∞, –≤–∞–º –Ω–µ –ø–æ–∫–∞–∑–∞–ª–æ—Å—å, —Ä–µ—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤,
–∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –¥–ª—è –≤–∞—Å –ø—É–Ω–∫—Çüëáüèª
    """
    await message.answer(ans, reply_markup=buttons)


async def profile(call: CallbackQuery):
    message = f"""
 üìã –ü—Ä–æ—Ñ–∏–ª—å

–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏üë∑üèª‚Äç‚ôÇÔ∏è
    """
    await call.message.answer(message)
    await call.answer()


async def solve_test(call: CallbackQuery):
    msg = """
 ‚úçüèª –†–µ—à–∏—Ç—å —Ç–µ—Å—Ç

‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Ç–µ—Å—Ç!
    """
    await call.message.answer(msg)
    await call.answer()
    await AnswerState.first()


async def parse_data(message: Message, state: FSMContext):
    await message.answer('–†–µ—à–∞–µ–ºüßê')
    url = message.text
    try:
        q_lst, a_lst = create_url_and_start_parser(url)
        msg = ''
        for id, question in enumerate(q_lst):
            msg += f'<b>{id + 1}</b>. {question}\n<b>–û—Ç–≤–µ—Ç</b>: {hcode(", ".join(a_lst[id]))}\n'

        await message.answer(msg)
    except Exception as ex:
        err['url'] = url
        err['error'] = str(ex)
        err['user_id'] = message.from_user.id
        msg = """
‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ ‚ö†
        
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑‚ùó
–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –ø—Ä–æ–ø–∞–¥–µ—Ç, —Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ª–æ–∂–∏—Ç–µ
–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

üëá –ë–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞–º –±–æ—Ç —Å—Ç–∞–Ω–µ—Ç –µ—â—ë –ª—É—á—à–µ‚ù§Ô∏è
"""
        await message.answer(msg, reply_markup=report_admin_button)
    await state.finish()


async def report_admin(call: CallbackQuery):
    await call.answer(f'–°–ø–∞—Å–∏–±–æ‚ù§')
    await call.message.delete_reply_markup()

    config = load_config(".env")
    bot = Bot(token=config.tg_bot.token, parse_mode='HTML')
    admin = config.tg_bot.admin_ids[0]

    error_message = f"""
–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:
user_id: {err['user_id']}
url: {err['url']}
error: {err['error']}
    """
    await bot.send_message(admin, error_message)


def register_start(dp: Dispatcher):
    dp.register_message_handler(user_start, commands=["start"])
    dp.register_callback_query_handler(profile, text='profile')
    dp.register_callback_query_handler(solve_test, text='solve_test')
    dp.register_message_handler(parse_data, state=AnswerState.GetURL)
    dp.register_callback_query_handler(report_admin, text='report_admin')
